--- /usr/portage/./eclass/java-utils-2.eclass	2010-03-24 13:35:42.000000000 +0100
+++ ./eclass/java-utils-2.eclass	2010-03-27 23:22:52.000000000 +0100
@@ -23,7 +23,7 @@
 #
 # -----------------------------------------------------------------------------
 
-inherit eutils versionator multilib
+inherit eutils versionator flag-o-matic check-reqs multilib
 
 IUSE="elibc_FreeBSD"
 
@@ -192,6 +192,71 @@
 JAVA_PKG_QA_VIOLATIONS=0
 
 # -----------------------------------------------------------------------------
+# @variable-internal JAVA_PKG_NATIVE_CLASSMAP
+#
+# Explicitly set classmap.gcjdb database file
+# This is set by java-pkg_native_set_env once the libgcj ABI is known.
+# Previously, it was externally configurable and defaulted to
+#	JAVA_PKG_NATIVE_CLASSMAP="/usr/share/java/classmap.gcjdb"
+# -----------------------------------------------------------------------------
+JAVA_PKG_NATIVE_CLASSMAP=""
+
+# -----------------------------------------------------------------------------
+# @variable-external JAVA_PKG_NATIVE_GCJ_PROFILE
+#
+# Preferred gcc-config profile for building native packages if the java-config
+# system VM is _not_ gcj-jdk. If the selected java-config VM profile is
+# gcj-jdk this variable is unused and packages are built for the current VM.
+#
+# @example JAVA_PKG_NATIVE_GCJ_PROFILE="x86_64-pc-linux-gnu-4.3.3"
+# @example JAVA_PKG_NATIVE_GCJ_PROFILE="highest"
+# -----------------------------------------------------------------------------
+
+# -----------------------------------------------------------------------------
+# @variable-internal JAVA_PKG_NATIVE_CACHE_FLAGS
+#
+# Required flags for native library
+# -----------------------------------------------------------------------------
+JAVA_PKG_NATIVE_CACHE_FLAGS="-shared -Wl,-Bsymbolic -fPIC -findirect-dispatch -fjni"
+
+# -----------------------------------------------------------------------------
+# @variable-internal JAVA_PKG_NATIVE_BIN_FLAGS
+#
+# Required ldflags for native binary set by java-pkg_native_set_env
+# -----------------------------------------------------------------------------
+JAVA_PKG_NATIVE_BIN_FLAGS=""
+
+# -----------------------------------------------------------------------------
+# @variable-internal JAVA_PKG_NATIVE_INC
+#
+# Set include files (jar) to compile native code
+# This is generated by java-pkg_gen-native-cp
+# -----------------------------------------------------------------------------
+JAVA_PKG_NATIVE_INC=""
+
+# -----------------------------------------------------------------------------
+# @variable-internal JAVA_PKG_NATIVE_LIB
+#
+# Set library files (jar.so) to link native code
+# This is generated by java-pkg_gen-native-cp
+# -----------------------------------------------------------------------------
+JAVA_PKG_NATIVE_LIB=""
+
+# -----------------------------------------------------------------------------
+# @variable-internal JAVA_PKG_NATIVE_SKIP
+#
+# Jar files that match pattern will be skipped.
+#
+# @example
+#	java-pkg_skip-cachejar org.eclipse.jdt.core_ org.eclipse.jdt.apt
+#	java-pkg_skip-cachejar 2000 org.eclipse.jdt.ui_
+#
+# param $1 - optional: memory size to check
+# param $@ - pattern of Jar files to skip
+# -----------------------------------------------------------------------------
+JAVA_PKG_NATIVE_SKIP=""
+
+# -----------------------------------------------------------------------------
 # @section-end variables
 # -----------------------------------------------------------------------------
 
@@ -308,6 +373,7 @@
 	done
 
 	java-pkg_do_write_
+	java-pkg_cachejar_
 }
 
 # ------------------------------------------------------------------------------
@@ -1382,6 +1448,83 @@
 # ------------------------------------------------------------------------------
 
 # ------------------------------------------------------------------------------
+# @ebuild-function java-pkg_need
+#
+# Adds virtual dependencies, which can optionally be controlled by a USE flag.
+# Currently supported virtuals are:
+#	javamail
+#	jdbc-stdext
+#	jaf
+#	jdbc-rowset
+#	jms
+#
+# @param $1 - Optionally indicate that the dependencies are controlled by
+#				a use flag by specifying '--use' Requires $2.
+# @param $2 - USE flag which will enable the dependencies.
+# @param $@ - virtual packages to add depenedencies for
+# ------------------------------------------------------------------------------
+# TODO rewrite to parse a line based declaration file instead -- karltk
+#java-pkg_need() {
+#	debug-print-function ${FUNCNAME} $*
+#	local useflag
+#	if [[ ${1} == "--use" ]]; then
+#		useflag="${2}"
+#		shift 2
+#	fi
+#
+#	if [[ -z ${1} ]]; then
+#		die "Must specify at least one virtual package."
+#	fi
+#
+#	local depstr newdepstr
+#
+#	for virtual in ${@}; do
+#		if has ${virtual} ${JAVA_PKG_VNEED}; then
+#			debug-print "Already registered virtual ${virtual}"
+#			continue
+#		fi
+#		case ${virtual} in
+#			javamail)
+#				debug-print "java-pkg_need: adding javamail dependencies"
+#				newdepstr="|| ( dev-java/gnu-javamail dev-java/sun-javamail-bin )"
+#				;;
+#			jdbc-stdext)
+#				debug-print "java-pkg_need: adding jdbc-stdext dependencies"
+#				newdepstr="|| ( >=virtual/jdk-1.4 dev-java/jdbc2-stdext )"
+#				;;
+#			jaf)
+#				debug-print "java-pkg_need: adding jaf dependencies"
+#				newdepstr="|| ( dev-java/gnu-jaf dev-java/sun-jaf-bin )"
+#				;;
+#			jdbc-rowset)
+#				debug-print "java-pkg_need: adding jdbc-rowset dependencies"
+#			 	newdepstr="|| ( >=virtual/jdk-1.5 dev-java/sun-jdbc-rowset )"
+#				;;
+#			jms)
+#				debug-print "java-pkg_need: adding jms dependencies"
+#				newdepstr="|| ( dev-java/sun-jms dev-java/openjms )"
+#				;;
+#			*)
+#				die "Invalid virtual: ${virtual}"
+#		esac
+#
+#		export JAVA_PKG_VNEED="${JAVA_PKG_VNEED} ${virtual}"
+#
+#		if [[ -n ${useflag} ]]; then
+#			depstr="${depstr} ${useflag}? ( ${newdepstr} )"
+#		else
+#			depstr="${depstr} ${newdepstr}"
+#		fi
+#	done
+#
+#	[[ -z ${JAVA_PKG_NV_DEPEND} ]] && export JAVA_PKG_NV_DEPEND="${DEPEND}"
+#	[[ -z ${JAVA_PKG_NV_RDEPEND} ]] && export JAVA_PKG_NV_RDEPEND="${RDEPEND}"
+#
+#	export DEPEND="${DEPEND} ${depstr}"
+#	export RDEPEND="${RDEPEND} ${depstr}"
+#}
+
+# ------------------------------------------------------------------------------
 # @ebuild-function java-pkg_find-normal-jars
 #
 # Find the files with suffix .jar file in the given directory or $WORKDIR
@@ -2567,11 +2710,15 @@
 			die "java-pkg_javac-args failed"
 		fi
 		[[ -n ${JAVACFLAGS_EXTRA} ]] && JAVACFLAGS="${JAVACFLAGS_EXTRA} ${JAVACFLAGS}"
+
 		export JAVACFLAGS
 
 		export JAVA_HOME="$(java-config -g JAVA_HOME)"
 		export JDK_HOME=${JAVA_HOME}
 
+		# Setup GCJ environment for packages that use gcj directly
+		java-pkg_native_init_
+
 		#TODO If you know a better solution let us know.
 		java-pkg_append_ LD_LIBRARY_PATH "$(java-config -g LDPATH)"
 
@@ -2589,6 +2736,575 @@
 }
 
 # ------------------------------------------------------------------------------
+# @internal-function java-pkg_gcjflags
+#
+# sanitze CFLAGS for GCJ native.
+# ------------------------------------------------------------------------------
+java-pkg_gcjflags() {
+	OPTIMIZE_CFLAGS=${CFLAGS}
+	strip-flags
+	filter-flags "-ftree-loop-distribution -ftree-vectorize"
+	filter-flags "-D*"
+	replace-flags "-O?" "-O1"
+	append-flags -w
+
+	filter-ldflags -Wl,--as-needed --as-needed
+}
+
+# ------------------------------------------------------------------------------
+# @internal-function java-pkg_native-tc-abi
+#
+# Return libgcj ABI version for given GCJ profile
+# @param $1 - gcc-config profile (optional)
+# @return 0 - 
+# ------------------------------------------------------------------------------
+java-pkg_native-tc-abi() {
+	local gccbin="$(gcc-config -B ${1})"
+	echo "$(ls -l $(${gccbin}/gcj -print-file-name=libgcj.so) \
+	  | sed -r 's:.*\.so\.([0-9]*).*$:\1:')"
+	return "${?}"
+}
+
+# ------------------------------------------------------------------------------
+# @internal-function java-pkg_native-jdk-abi
+#
+# Return libgcj ABI version for given java-config VM or current system VM if
+# not specified.
+# @param $1 - java-config VM (optional)
+# @return - ABI version
+# ------------------------------------------------------------------------------
+java-pkg_native-jdk-abi() {
+	local java_vm
+	[[ -z ${1} ]] && java_vm=$(java-config -f)
+	echo "$(java-config --select-vm ${1} -O | sed -r 's:.*-([0-9]*)$:\1:')"
+	return "${?}"
+}  
+
+# ------------------------------------------------------------------------------
+# @internal-function java-pkg_native-match-jdk-with-tc
+#
+# Find a matching gcj-jdk for a given libgcc ABI
+#
+# @param $1 - libgcj ABI version
+# @return - gcj-jdk version
+# ------------------------------------------------------------------------------
+java-pkg_native-match-jdk-with-tc() {
+	local libgcj_soversion=${1}
+
+	for gcj_jdk_slot in $(java-config -L \
+	  | grep gcj-jdk | sed -r \
+	  's/.*gcj-jdk-(.*)]/\1/g'); do
+		if [[ "$(java-pkg_native-tc-abi ${libgcj_soversion})" == \
+		  "$(java-pkg_native-jdk-abi \
+		  gcj-jdk-${gcj_jdk_slot})" ]]; then
+			gcj_java_home=$(java-config \
+			--select-vm gcj-jdk-${gcj_jdk_slot} -O)
+			echo "gcj-jdk-${gcj_jdk_slot}"
+			return "0"
+		fi
+	done
+
+	return "1"
+}
+
+# ------------------------------------------------------------------------------
+# @internal-function java-pkg_native-check-gcj
+#
+# For a given GCJ profile, check for existance of gcj and gcj-dbtool
+# binaries, then compare against installed gcj-jdk(s) if "any" flag is unset
+#
+# @param $1 - gcc-config profile
+# @param $2 - "any" flag (optional)
+# @return - 0 on success, otherwise 1
+# ------------------------------------------------------------------------------
+java-pkg_native-check-gcj()
+{
+	local gccbin=$(gcc-config -B ${1})
+	local any=${2}
+	if ( [[ -x ${gccbin}/gcj ]] &&
+	  [[ -x ${gccbin}/gcj-dbtool ]] ); then
+		if [[ ${any} == "1" ]]; then
+			return 0;
+		else
+			if (java-pkg_native-match-jdk-with-tc \
+				  ${gcc_profile} >/dev/null); then
+				return 0;
+			fi
+		fi
+	fi
+	return 1;
+}
+
+# ------------------------------------------------------------------------------
+# @internal-function java-pkg_find-supported-gcj
+#
+# Find a suitable GCJ profile (this is a recursive function)
+#
+# @param $1 - any flag (used for recursion)
+# ------------------------------------------------------------------------------
+java-pkg_native-find-supported-gcj() {
+	local gccbin gcc_profile
+	local any=${1} try_current=1
+	if ! [[ $(echo "$(java-config -L)" | grep 'gcj-jdk') ]]; then
+		any=1
+	fi
+
+	# First check preferred gcc-config profile
+	if ! [[ -z ${JAVA_PKG_NATIVE_GCJ_PROFILE} ]]; then
+		if [[ "${JAVA_PKG_NATIVE_GCJ_PROFILE}" == "highest" ]]; then
+			try_current=0;
+		else
+			gcc_profile="${JAVA_PKG_NATIVE_GCJ_PROFILE}"
+			if (java-pkg_native-check-gcj "${gcc_profile}" "${any}"); then
+				echo "${gcc_profile}";
+				return 0;
+			fi
+		fi	
+	fi
+	
+	# Next check current gcc-config profile
+	if [[ ${try_current} == "1" ]]; then
+		gcc_profile="$(gcc-config -c)"
+		if (java-pkg_native-check-gcj "${gcc_profile}" "${any}"); then
+			echo "${gcc_profile}";
+			return 0;
+		fi	
+	fi	
+	# Now check all gcc-config profiles
+	for gcc_profile in $(ls -1r /etc/env.d/gcc/${CHOST}-*); do
+		if (java-pkg_native-check-gcj "${gcc_profile}" "${any}"); then
+			echo "${gcc_profile}";
+			return 0;
+		fi
+	done
+
+	# If we get here and no matches have occurred (yet), try any, or
+	# fail if "any" flag already set
+	if [[ "${any}" == "1" ]]; then
+		return 1;
+	else
+		gcc_profile="$(java-pkg_native-find-supported-gcj 1)"
+		if [[ "${?}" == "0" ]]; then
+			echo ${gcc_profile}
+			return 0;
+		fi
+	fi
+
+	# if we get here all has failed (no gcj available)
+	return 1;
+}
+
+# ------------------------------------------------------------------------------
+# @internal-function java-pkg_native-select-current-jdk-gcj
+#
+# Attempt to use the current gcj-jdk as the target for native builds
+#
+# ------------------------------------------------------------------------------
+java-pkg_native-select-current-jdk-gcj() {
+	local selected_jdk=$(java-config -f)
+	local gcc_profile=$(gcc-config -c)  
+	local gcc_profile_
+	[[ $(echo "$(java-config -f)" | grep 'gcj-jdk') ]] || return 1
+
+	if [[ "$(java-pkg_native-tc-abi ${gcc_profile})" != \
+		  "$(java-pkg_native-jdk-abi ${selected_jdk})" ]]; then
+		gcc_profile_=${gcc_profile}
+		gcc_profile=${CHOST}-$(java-config -g VERSION | \
+			  sed -r -e 's:GCJ (.*[0-9]).*$:\1:g' -e 's/_/-/g')
+		if (java-pkg_native-check-gcj ${gcc_profile} 1); then
+			# The selected gcj-jdk uses a different ABI version
+			# than the currently selected gcc
+			echo "${gcc_profile}";
+			return 0;
+		else
+			ewarn "The corresponding gcc/gcj profile for the"
+			ewarn "selected gcj-jdk seems to be missing!"
+			return 1;
+		fi
+	fi
+	echo "${gcc_profile}";
+	return 0
+}
+
+# ------------------------------------------------------------------------------
+# @internal-function java-pkg_native_set-env
+#
+# Set native build environment for given gcc
+# @param $1 - gcc gcj profile
+# ------------------------------------------------------------------------------
+java-pkg_native-set-env() {
+	# TODO: check cross compiling is working...
+	local gcj_java_home gcc_branch_ver gcc_config_ver gcc_slot
+	local gcc_profile="${1}"
+
+	if !(java-pkg_native-check-gcj ${gcc_profile} 1); then
+		ewarn "There is a problem with the selected gcj profile"
+		return 1;
+	fi
+	local libgcj_abi_version="$(java-pkg_native-tc-abi ${gcc_profile})"
+	local gccbin="$(gcc-config -B ${gcc_profile})"
+	local gcj_target="$($gccbin/gcj -dumpmachine)"
+	[[ -z gcc_target ]] && die "gcj binary missing for ${gcc_profile}"
+
+	# Construct the gcj-jdk JAVA_HOME in the same way as the gcj-jdk
+	# ebuild just in case it's not installed yet
+	gcc_branch_ver="$(get_version_component_range 1-2 ${gcc_profile/$gcj_target-})"
+	gcc_config_ver="${gcc_config_ver:-$(replace_version_separator 3 '-' ${gcc_profile/$gcj_target-})}"
+	if use multislot ; then
+		gcc_slot="${gcj_target}-${gcc_config_ver}"
+	else
+		gcc_slot="${gcc_branch_ver}"
+	fi
+	gcj_java_home="/usr/$(get_libdir)/gcj-jdk-${gcc_slot}-${libgcj_abi_version}"
+	[[ -d "${gcj_java_home}" ]] || die "dev-java/gcj-jdk-${gcc_config_ver} needs to be installed to compile native packages with gcj"
+	JAVA_PKG_NATIVE_BIN_FLAGS="-Wl,-rpath ${gcj_java_home}/lib/${ABI} -Wl,-Bsymbolic -findirect-dispatch -fjni"
+
+	export GCJ="${gccbin}/gcj"
+	export DBTOOL="${gccbin}/gcj-dbtool"
+	
+	return 0
+}
+
+# ------------------------------------------------------------------------------
+# @internal-function java-pkg_native_init_
+#
+# Check for issues
+#
+# @return 0 - procede with native build
+# @return 1 - skip native build
+# ------------------------------------------------------------------------------
+java-pkg_native_init_() {
+	local skip_cflags="${1}"
+	if ! has gcj "${IUSE}" || ! use gcj ; then
+		return 1
+	fi
+
+	# The libgcj ABI has a habbit of changing incompatibly between
+	# versions, if the current java-jdk is set to gcj-jdk, compare the
+	# ABI version with the current gcc libgcj ABI version, if it differs
+	# use the gcj matching the java-jdk version, otherwise next use the
+	# highest version installed gcc first with gcj-jdk support, then
+	# without.
+
+	# Is the current system VM gcj-jdk?  Is GCJ available?
+	# If so, use the gcc-config profile for that gcj-jdk
+	#einfo "Checking current java-config system VM profile ..."
+	gcc_profile=$(java-pkg_native-select-current-jdk-gcj)
+	# If not, find a suitable version
+	if [[ "${?}" != "0" ]]; then
+			#einfo "Unable to match a gcc-config profile to current java-config system VM"
+			#einfo "Attempting to determine suitable gcc-config profile for this system ..."
+			gcc_profile=$(java-pkg_native-find-supported-gcj)
+	else
+			einfo "System Java VM is gcj-jdk. Using selected profile."
+	fi
+	if [[ "${?}" != "0" ]]; then
+		# Do we want to die here?
+		ewarn "java native tools unusable!"
+		return 1
+	fi
+
+	einfo "Using gcc-config profile: ${gcc_profile} to build native pkg ..."
+
+	java-pkg_native-set-env ${gcc_profile}
+
+	return 0
+}
+
+# ------------------------------------------------------------------------------
+# @ebuild-function java-pkg_gen-native-cp
+#
+# Set include and library paths for native build.
+#
+# Example:
+#	java-pkg_gen-native-cp junit gnu-crypto ...
+#
+# @param $@ - space-separated list of packages
+# ------------------------------------------------------------------------------
+java-pkg_gen-native-cp() {
+	java-pkg_native_init_ || return 0
+
+	java-pkg_gcjflags
+
+	local pkg cp item lib
+	for pkg in ${@} ; do
+		cp="$(java-config --classpath=${pkg})"
+		for item in ${cp//:/ } ; do
+			if [[ ( -f "${item}" ) && ( ".jar" == "${item: -4:4}" ) ]] ; then
+				lib="$(dirname ${item})/lib$(basename ${item}).so"
+				[ ! -f "${lib}" ] && die "Native library ${lib} from ${pkg} missing!"
+				JAVA_PKG_NATIVE_INC="${JAVA_PKG_NATIVE_INC} -I${item}"
+				JAVA_PKG_NATIVE_LIB="${JAVA_PKG_NATIVE_LIB} ${lib}"
+			fi
+		done
+	done
+}
+
+# ------------------------------------------------------------------------------
+# @ebuild-function java-pkg_donative
+#
+# Compile Java source to native.
+#
+# Example:
+#	java-pkg_donative src/java/* ...
+#		Where '*' is org or com et cetera
+#
+# @param $@ - path to java source(s)
+# ------------------------------------------------------------------------------
+java-pkg_donative() {
+	java-pkg_native_init_ || return 0
+
+	java-pkg_gcjflags
+
+	einfo "Compile Java source to native ..."
+
+	local buildpath="${S}/build/native"
+	mkdir -p "${buildpath}"
+
+	local path
+	for path in ${@} ; do
+		cp -a "${path}" "${buildpath}"
+	done
+
+	pushd "${buildpath}" >/dev/null || die "no native build there!"
+
+	local file
+	for file in $(find -type f -name '*.java' | cut -c3-) ; do
+		echo ${GCJ} -c -g0 ${OPTIMIZE_CFLAGS} -Wno-deprecated \
+			${JAVA_PKG_NATIVE_INC} ${file} -o ${file/\.java/.o}
+		${GCJ} -c -g0 ${OPTIMIZE_CFLAGS} -Wno-deprecated \
+			${JAVA_PKG_NATIVE_INC} ${file} -o ${file/\.java/.o} \
+			|| die "java native compile failed! (${file})"
+	done
+
+	# Any other resource formats out there?
+	# .properties, .rsc, .xml
+
+	for file in $(find -type f \( -name '*.properties' -o -name '*.rsc' -o -name '*.xml' \) | cut -c3-) ; do
+		echo ${GCJ} -c -g0 ${OPTIMIZE_CFLAGS} -Wno-deprecated \
+			--resource ${file} ${file} -o ${file}.o
+		${GCJ} -c -g0 ${OPTIMIZE_CFLAGS} -Wno-deprecated \
+			--resource ${file} ${file} -o ${file}.o \
+			|| die "java native compile failed! (${file})"
+	done
+
+	popd >/dev/null
+}
+
+# ------------------------------------------------------------------------------
+# @ebuild-function java-pkg_donative-bin
+#
+# Create native binary.
+#
+# Example:
+#	java-pkg_donative-bin com.example.my.Main <name of native binary>
+#	java-pkg_donative-bin com.example.my.Main <path to jar file>
+#
+# @param $1 - main function to call on execution of the native binary
+# @param $2 - optional: the name of resulting binary
+#						path to jar file to turn native
+# ------------------------------------------------------------------------------
+java-pkg_donative-bin() {
+	java-pkg_native_init_ || return 0
+
+	java-pkg_gcjflags
+
+	[ -z "${1}" ] && die "set the main function to call for the binary!"
+
+	if [ ".jar" == "${2: -4:4}" ] ; then
+		pushd "${S}" >/dev/null
+
+		echo ${GCJ} --main=${1} -o ${2/\.jar} ${2} \
+			${JAVA_PKG_NATIVE_BIN_FLAGS} ${CFLAGS} ${LDFLAGS} \
+			${JAVA_PKG_NATIVE_INC} ${JAVA_PKG_NATIVE_LIB}
+		${GCJ} --main=${1} -o ${2/\.jar} ${2} \
+			${JAVA_PKG_NATIVE_BIN_FLAGS} ${CFLAGS} ${LDFLAGS} \
+			${JAVA_PKG_NATIVE_INC} ${JAVA_PKG_NATIVE_LIB} \
+			|| die "build of native binary failed! (from jar)"
+	else
+		pushd "${S}/build/native" >/dev/null || die "no native build there!"
+
+		local file files
+		for file in $(find -type f -name '*.o' | cut -c3-) ; do
+			files="${files} ${file}"
+		done
+
+		local bin=""
+		if [ -n "${2}" ] ; then
+			bin="${2}"
+		elif [[ ( -n "${SLOT}" ) && ( "${SLOT}" != "0" ) ]] ; then
+			bin="${PN}-native-${SLOT}"
+		else
+			bin="${PN}-native"
+		fi
+
+		echo ${GCJ} ${JAVA_PKG_NATIVE_BIN_FLAGS} \
+			--main=${1} -o ../${bin} ${LDFLAGS} \
+			${JAVA_PKG_NATIVE_LIB} ...
+		${GCJ} ${JAVA_PKG_NATIVE_BIN_FLAGS} \
+			--main=${1} -o ../${bin} ${LDFLAGS} \
+			${JAVA_PKG_NATIVE_LIB} ${files} \
+			|| die "build of native binary failed! (from source)"
+	fi
+
+	popd >/dev/null
+}
+
+# ------------------------------------------------------------------------------
+# @ebuild-function java-pkg_skip-cachejar
+#
+# Skip caching of Jar files that match pattern.
+#
+# Example:
+#	java-pkg_skip-cachejar org.eclipse.jdt.core_ org.eclipse.jdt.apt
+#	java-pkg_skip-cachejar 2000 org.eclipse.jdt.ui_
+#
+# param $1 - optional: memory size to check
+# param $@ - pattern of Jar files to skip
+# ------------------------------------------------------------------------------
+java-pkg_skip-cachejar() {
+	java-pkg_native_init_ || return 0
+
+	java-pkg_gcjflags
+
+	if [[ ${1} =~ ^[0-9]+$ ]] ; then
+		CHECKREQS_MEMORY="${1}"
+		check_reqs_conditional && return 0
+		shift
+	fi
+
+	JAVA_PKG_NATIVE_SKIP="${JAVA_PKG_NATIVE_SKIP} ${@}"
+}
+
+# ------------------------------------------------------------------------------
+# @ebuild-function java-pkg_cachejar
+#
+# Create native library from jar.
+# For packages not using java-pkg_dojar.
+#
+# Example:
+#	use gcj && java-pkg_cachejar
+#
+# @param $@ - none
+# ------------------------------------------------------------------------------
+java-pkg_cachejar() {
+	java-pkg_native_init_ || return 0
+
+	java-pkg_gcjflags
+
+	pushd "${D}" >/dev/null || die "This function is for src_install!"
+
+	local jars jar
+	for jar in $(find -type f -name '*.jar' | cut -c2-) ; do
+		jars="${jars} ${jar}"
+	done
+
+	java-pkg_cachejar_ "${jars}"
+
+	popd >/dev/null
+}
+
+# ------------------------------------------------------------------------------
+# @internal-function java-pkg_cachejar_
+#
+# Create native library from jar
+# ------------------------------------------------------------------------------
+java-pkg_cachejar_() {
+	java-pkg_native_init_ || return 0
+
+	java-pkg_gcjflags
+
+	local jars
+	[ ${#} -lt 1 ] \
+		&& jars="${JAVA_PKG_CLASSPATH//:/ }" \
+		|| jars="${@}"
+
+	local item jar to
+	for jar in ${jars} ; do
+		for item in ${JAVA_PKG_NATIVE_SKIP} ; do
+			if [[ ${jar} =~ ${item} ]] ; then
+				ewarn "skip: ${jar}"
+				jar="no_native_lib"
+				break
+			fi
+		done
+
+		to="$(dirname ${jar})/${ABI}/lib$(basename ${jar}).so"
+		mkdir -p "${D}$(dirname ${to})"
+		if [[ ( -f "${D}${jar}" ) && ( ".jar" == "${jar: -4:4}" ) && ( ! -e "${D}${to}" ) ]] ; then
+			echo ${GCJ} ${JAVA_PKG_NATIVE_CACHE_FLAGS} \
+				-g0 ${CFLAGS} -o ${to} ${jar}
+			if ! ${GCJ} ${JAVA_PKG_NATIVE_CACHE_FLAGS} \
+				-g0 ${CFLAGS} -o ${D}${to} ${D}${jar} ; then
+				ewarn "${to} build failed -> skipping"
+			fi
+		fi
+	done
+}
+# ------------------------------------------------------------------------------
+# @internal-function java-pkg_do_reg-cachejar_
+#
+# Register native library for each ABI
+# ------------------------------------------------------------------------------
+java-pkg_do_reg-cachejar_() {
+	# Create new database?
+	if [ ! -e "${JAVA_PKG_NATIVE_CLASSMAP}" ] ; then
+		einfo "Create new database ..."
+		[ -d "$(dirname ${JAVA_PKG_NATIVE_CLASSMAP})" ] \
+			|| mkdir -p "$(dirname ${JAVA_PKG_NATIVE_CLASSMAP})"
+		${DBTOOL} -n ${JAVA_PKG_NATIVE_CLASSMAP}
+	fi
+
+	einfo "Register native library in database (${JAVA_PKG_NATIVE_CLASSMAP}) ..."
+
+	local jar to
+	for jar in ${JAVA_PKG_CLASSPATH//:/ } ; do
+		to="$(dirname ${jar})/${ABI}/lib$(basename ${jar}).so"
+		if [[ ( -f "${jar}" ) && ( ".jar" == "${jar: -4:4}" ) && ( -f "${to}" ) ]] ; then
+			einfo "library: ${to}"
+			${DBTOOL} -a ${JAVA_PKG_NATIVE_CLASSMAP} ${jar} ${to} \
+				|| die "failed to register jar file"
+		fi
+	done
+}
+
+# ------------------------------------------------------------------------------
+# @internal-function java-pkg_reg-cachejar_
+#
+# Register native library
+# ------------------------------------------------------------------------------
+java-pkg_reg-cachejar_() {
+	java-pkg_native_init_ || return 0
+
+	java-pkg_gcjflags
+
+	[ -z "${JAVA_PKG_CLASSPATH}" ] && return 0
+
+	# For each ABI:
+	local abilist=""
+	local libgcj_abi_version="$(java-pkg_native-tc-abi ${gcc_profile})"
+	if has_multilib_profile ; then
+		abilist=$(get_install_abis)
+	fi
+	if [[ -n ${abilist} ]] ; then
+		OABI=${ABI}
+		for ABI in ${abilist} ; do
+			export ABI
+			# The ABI for libgcj must match the native binary/library
+			JAVA_PKG_NATIVE_CLASSMAP="/usr/share/java/gcj/${ABI}/${libgcj_abi_version}/classmap.db"
+			java-pkg_do_reg-cachejar_
+		done
+		ABI=${OABI}
+		unset OABI
+		return 0
+	else
+		JAVA_PKG_NATIVE_CLASSMAP="/usr/share/java/gcj/${libgcj_abi_version}/classmap.db"
+		java-pkg_do_reg-cachejar_
+	fi
+
+}
+
+# ------------------------------------------------------------------------------
 # @internal-function java-pkg_die
 #
 # Enhanced die for Java packages, which displays some information that may be
