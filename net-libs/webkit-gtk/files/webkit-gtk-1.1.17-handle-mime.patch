diff -rNu webkit-1.1.17.old/GNUmakefile.am webkit-1.1.17/GNUmakefile.am
--- webkit-1.1.17.old/GNUmakefile.am	2010-01-05 10:30:41.000000000 +0100
+++ webkit-1.1.17/GNUmakefile.am	2010-01-05 10:35:37.000000000 +0100
@@ -582,6 +582,7 @@
 
 TEST_PROGS += Programs/unittests/testhttpbackend \
 	Programs/unittests/testloading \
+	Programs/unittests/testmimehandling \
 	Programs/unittests/testnetworkrequest \
 	Programs/unittests/testnetworkresponse \
 	Programs/unittests/testwebframe \
@@ -607,6 +608,11 @@
 Programs_unittests_testloading_LDADD = $(webkit_tests_ldadd)
 Programs_unittests_testloading_LDFLAGS = $(webkit_tests_ldflags)
 
+Programs_unittests_testmimehandling_SOURCES = WebKit/gtk/tests/testmimehandling.c
+Programs_unittests_testmimehandling_CFLAGS = $(webkit_tests_cflags)
+Programs_unittests_testmimehandling_LDADD = $(webkit_tests_ldadd)
+Programs_unittests_testmimehandling_LDFLAGS = $(webkit_tests_ldflags)
+
 Programs_unittests_testnetworkrequest_SOURCES = WebKit/gtk/tests/testnetworkrequest.c
 Programs_unittests_testnetworkrequest_CFLAGS = $(webkit_tests_cflags)
 Programs_unittests_testnetworkrequest_LDADD = $(webkit_tests_ldadd)
diff -rNu webkit-1.1.17.old/WebCore/platform/graphics/gtk/MediaPlayerPrivateGStreamer.cpp webkit-1.1.17/WebCore/platform/graphics/gtk/MediaPlayerPrivateGStreamer.cpp
--- webkit-1.1.17.old/WebCore/platform/graphics/gtk/MediaPlayerPrivateGStreamer.cpp	2010-01-05 10:30:41.000000000 +0100
+++ webkit-1.1.17/WebCore/platform/graphics/gtk/MediaPlayerPrivateGStreamer.cpp	2010-01-05 10:37:27.000000000 +0100
@@ -758,19 +758,16 @@
 
     if (!typeListInitialized) {
         // These subtypes are already beeing supported by WebKit itself
-        HashSet<String> ignoredApplicationSubtypes;
-        ignoredApplicationSubtypes.add(String("javascript"));
-        ignoredApplicationSubtypes.add(String("ecmascript"));
-        ignoredApplicationSubtypes.add(String("x-javascript"));
-        ignoredApplicationSubtypes.add(String("xml"));
-        ignoredApplicationSubtypes.add(String("xhtml+xml"));
-        ignoredApplicationSubtypes.add(String("rss+xml"));
-        ignoredApplicationSubtypes.add(String("atom+xml"));
-        ignoredApplicationSubtypes.add(String("x-ftp-directory"));
-        ignoredApplicationSubtypes.add(String("x-java-applet"));
-        ignoredApplicationSubtypes.add(String("x-java-bean"));
-        ignoredApplicationSubtypes.add(String("x-java-vm"));
-        ignoredApplicationSubtypes.add(String("x-shockwave-flash"));
+        HashSet<String> handledApplicationSubtypes;
+        handledApplicationSubtypes.add(String("x-id3v2"));
+        handledApplicationSubtypes.add(String("x-id3v1"));
+        handledApplicationSubtypes.add(String("x-apetag"));
+        handledApplicationSubtypes.add(String("ogg"));
+        handledApplicationSubtypes.add(String("x-3gp"));
+        handledApplicationSubtypes.add(String("vnd.rn-realmedia"));
+        handledApplicationSubtypes.add(String("x-pn-realaudio"));
+        handledApplicationSubtypes.add(String("sdp"));
+        handledApplicationSubtypes.add(String("smil"));
 
         GList* factories = gst_type_find_factory_get_list();
         for (GList* iterator = factories; iterator; iterator = iterator->next) {
@@ -790,7 +787,7 @@
             if (g_str_equal(mimetype[0], "audio")
                 || g_str_equal(mimetype[0], "video")
                 || (g_str_equal(mimetype[0], "application")
-                    && !ignoredApplicationSubtypes.contains(String(mimetype[1])))) {
+                    && handledApplicationSubtypes.contains(String(mimetype[1])))) {
                 cache.add(String(capability[0]));
 
                 // These formats are supported by GStreamer, but not correctly advertised
diff -rNu webkit-1.1.17.old/WebKit/gtk/tests/resources/test.html webkit-1.1.17/WebKit/gtk/tests/resources/test.html
--- webkit-1.1.17.old/WebKit/gtk/tests/resources/test.html	1970-01-01 01:00:00.000000000 +0100
+++ webkit-1.1.17/WebKit/gtk/tests/resources/test.html	2010-01-05 10:35:37.000000000 +0100
@@ -0,0 +1,6 @@
+<html>
+<head><title>test</title></head>
+<body>test</body>
+</html>></head>
+<body>test</body>
+</html>
diff -rNu webkit-1.1.17.old/WebKit/gtk/tests/resources/test.txt webkit-1.1.17/WebKit/gtk/tests/resources/test.txt
--- webkit-1.1.17.old/WebKit/gtk/tests/resources/test.txt	1970-01-01 01:00:00.000000000 +0100
+++ webkit-1.1.17/WebKit/gtk/tests/resources/test.txt	2010-01-05 10:35:37.000000000 +0100
@@ -0,0 +1 @@
+test
diff -rNu webkit-1.1.17.old/WebKit/gtk/tests/testmimehandling.c webkit-1.1.17/WebKit/gtk/tests/testmimehandling.c
--- webkit-1.1.17.old/WebKit/gtk/tests/testmimehandling.c	1970-01-01 01:00:00.000000000 +0100
+++ webkit-1.1.17/WebKit/gtk/tests/testmimehandling.c	2010-01-05 10:35:37.000000000 +0100
@@ -0,0 +1,208 @@
+/*
+ * Copyright (C) 2009 Jan Michael Alonzo
+ * Copyright (C) 2009 Gustavo Noronha Silva
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public License
+ * along with this library; see the file COPYING.LIB.  If not, write to
+ * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
+ */
+
+#include <glib.h>
+#include <glib/gstdio.h>
+#include <libsoup/soup.h>
+#include <string.h>
+#include <webkit/webkit.h>
+
+#if GLIB_CHECK_VERSION(2, 16, 0) && GTK_CHECK_VERSION(2, 14, 0)
+
+GMainLoop* loop;
+SoupSession *session;
+char* base_uri;
+
+/* For real request testing */
+static void
+server_callback (SoupServer *server, SoupMessage *msg,
+                 const char *path, GHashTable *query,
+                 SoupClientContext *context, gpointer data)
+{
+    if (msg->method != SOUP_METHOD_GET) {
+        soup_message_set_status(msg, SOUP_STATUS_NOT_IMPLEMENTED);
+        return;
+    }
+
+    soup_message_set_status (msg, SOUP_STATUS_OK);
+
+    /* PDF */
+    if (g_str_equal(path, "/pdf")) {
+        char* contents;
+        gsize length;
+        GError* error = NULL;
+
+        g_file_get_contents("test.pdf", &contents, &length, &error);
+        g_assert(!error);
+
+        soup_message_body_append(msg->response_body, SOUP_MEMORY_TAKE, contents, length);
+    } else if (g_str_equal(path, "/html")) {
+        char* contents;
+        gsize length;
+        GError* error = NULL;
+
+        g_file_get_contents("test.html", &contents, &length, &error);
+        g_assert(!error);
+
+        soup_message_body_append(msg->response_body, SOUP_MEMORY_TAKE, contents, length);
+    } else if (g_str_equal(path, "/text")) {
+        char* contents;
+        gsize length;
+        GError* error = NULL;
+
+        g_file_get_contents("test.txt", &contents, &length, &error);
+        g_assert(!error);
+
+        soup_message_body_append(msg->response_body, SOUP_MEMORY_TAKE, contents, length);
+    } else if (g_str_equal(path, "/ogg")) {
+        char* contents;
+        gsize length;
+        GError* error = NULL;
+
+        g_file_get_contents("test.ogg", &contents, &length, &error);
+        g_assert(!error);
+
+        soup_message_body_append(msg->response_body, SOUP_MEMORY_TAKE, contents, length);
+    }
+
+    soup_message_body_complete (msg->response_body);
+}
+
+static gboolean idle_quit_loop_cb(gpointer data)
+{
+    g_main_loop_quit(loop);
+    return FALSE;
+}
+
+static gboolean mime_type_policy_decision_requested_cb(WebKitWebView* view, WebKitWebFrame* frame,
+                                                       WebKitNetworkRequest* request, const char* mime_type,
+                                                       WebKitWebPolicyDecision* decision, gpointer data)
+{
+    char* type = (char*)data;
+
+    if (g_str_equal(type, "pdf")) {
+        g_assert_cmpstr(mime_type, ==, "application/pdf");
+        g_assert(!webkit_web_view_can_show_mime_type(view, mime_type));
+    } else if (g_str_equal(type, "html")) {
+        g_assert_cmpstr(mime_type, ==, "text/html");
+        g_assert(webkit_web_view_can_show_mime_type(view, mime_type));
+    } else if (g_str_equal(type, "text")) {
+        g_assert_cmpstr(mime_type, ==, "text/plain");
+        g_assert(webkit_web_view_can_show_mime_type(view, mime_type));
+    } else if (g_str_equal(type, "ogg")) {
+        g_assert_cmpstr(mime_type, ==, "audio/ogg");
+        g_assert(webkit_web_view_can_show_mime_type(view, mime_type));
+    }
+
+    g_free(type);
+
+    return FALSE;
+}
+
+static void test_mime_type(const char* name)
+{
+    WebKitWebView* view = WEBKIT_WEB_VIEW(webkit_web_view_new());
+    g_object_ref_sink(G_OBJECT(view));
+
+    loop = g_main_loop_new(NULL, TRUE);
+
+    g_object_connect(G_OBJECT(view),
+                     "signal::load-finished", idle_quit_loop_cb, NULL,
+                     "signal::mime-type-policy-decision-requested", mime_type_policy_decision_requested_cb, g_strdup(name),
+                     NULL);
+
+    char* effective_uri = g_strdup_printf("%s%s", base_uri, name);
+    webkit_web_view_load_uri(view, effective_uri);
+    g_free(effective_uri);
+
+    g_main_loop_run(loop);
+
+    g_object_unref(view);
+}
+
+static void test_mime_pdf()
+{
+    test_mime_type("pdf");
+}
+
+static void test_mime_html()
+{
+    test_mime_type("html");
+}
+
+static void test_mime_text()
+{
+    test_mime_type("text");
+}
+
+static void test_mime_ogg()
+{
+    test_mime_type("pdf");
+}
+
+int main(int argc, char** argv)
+{
+    SoupServer* server;
+    SoupURI* soup_uri;
+    char* test_dir;
+    char* resources_dir;
+
+    g_thread_init(NULL);
+    gtk_test_init(&argc, &argv, NULL);
+
+    /* Hopefully make test independent of the path it's called from. */
+    test_dir = g_path_get_dirname(argv[0]);
+    resources_dir = g_build_path(G_DIR_SEPARATOR_S, test_dir,
+                                 "..", "..", "..", "..",
+                                 "WebKit", "gtk", "tests", "resources",
+                                 NULL);
+    g_free(test_dir);
+
+    g_chdir(resources_dir);
+    g_free(resources_dir);
+
+    server = soup_server_new(SOUP_SERVER_PORT, 0, NULL);
+    soup_server_run_async(server);
+
+    soup_server_add_handler(server, NULL, server_callback, NULL, NULL);
+
+    soup_uri = soup_uri_new ("http://127.0.0.1/");
+    soup_uri_set_port(soup_uri, soup_server_get_port(server));
+
+    base_uri = soup_uri_to_string(soup_uri, FALSE);
+    soup_uri_free(soup_uri);
+
+    g_test_bug_base("https://bugs.webkit.org/");
+    g_test_add_func("/webkit/mime/PDF", test_mime_pdf);
+    g_test_add_func("/webkit/mime/HTML", test_mime_html);
+    g_test_add_func("/webkit/mime/TEXT", test_mime_text);
+    g_test_add_func("/webkit/mime/OGG", test_mime_ogg);
+
+    return g_test_run ();
+}
+
+#else
+int main(int argc, char** argv)
+{
+    g_critical("You will need at least glib-2.16.0 and gtk-2.14.0 to run the unit tests. Doing nothing now.");
+    return 0;
+}
+
+#endif
