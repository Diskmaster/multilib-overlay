#!/bin/bash

# Usage:
#	# cd path/to/multilib/overlay
#	# bin/show_changes path/to/file.ebuild
# <read output, use vim to edit the ebuild>
#	# bin/show_changes --check
# <check you changed it correctly>
#	# ebuild path/to/file.ebuild digest	# or repoman manifest
#	# egencache --repo=multilib --update

# The purpose of this script is to display updates to ebuilds in the portage
# tree that need to be ported over to the ebuilds in the overlay, so that you
# can bring them up to date.

# It does this by comparing the CVS revision in the overlay ebuild with the
# current one in your portage tree CVS checkout.

# Possible future directions for this script could involve generating a diff of
# the old revision and the overlay file and trying to apply it to the new
# revision.  At the moment it is manual.

# Another obvious possibility would be scanning for changes in the portage tree
# for everything in the overlay.  This has some large problems: it is difficult
# to know when a particular file was taken out of portage, and so determine how
# far back to check for changes.  This is easy for ebuilds and eclasses, with
# their CVS headers, but for other files this is hugely problematic.

# IMPORTANT NOTE: You will need an actual CVS checkout of the portage tree,
# which you'll need to update before running this script.  You can set the
# following env var to where yours is.

: ${EMULTILIB_CVS_TREE:=~/src/gentoo-x86}

die() {
	local line
	for line in "${@:2}"
	do
		printf >&2 '%s\n' "$0: $line"
	done
	exit "$1"
}

if ! [[ "$( cat profiles/repo_name 2>/dev/null )" = multilib ]]
then
	die 1 "Please cd to your multilib overlay directory and run this" \
		"script as bin/show_changes [files]"
fi

if [[ "$1" = "--check" ]]
then
	check_mode="true"
	shift
fi

case "$1" in
	*/*/*.ebuild|eclass/*.eclass)
		;;
	*)
		die 1 "Please give the relative path to an ebuild or eclass";;
esac

file="$1"

if [[ "$check_mode" = "true" ]]
then
	diff -u "$EMULTILIB_CVS_TREE/$file" "$file"
	case $? in
		0) die 3 "No difference between portage and overlay ebuild.  That's bad." ;;
		1) : ;;
		*) die 2 "diff failed with exit code $?" ;;
	esac
else
	overlay_revision="$(awk '/# \$Header: / { print $4; exit }' "$file")" || \
		die 3 "failed to pull revision from cvs header in overlay file"

	pushd >/dev/null "$EMULTILIB_CVS_TREE" || \
		die 2 "pushd '$EMULTILIB_CVS_TREE' failed"

	cvs diff -s -d -u -r "$overlay_revision" "$file"
	(( $? == 0 )) && echo "'$file' has not been changed in portage tree"

	popd >/dev/null || die 2 "popd failed"
fi

if [[ -d "$EMULTILIB_CVS_TREE/${file%/*}/files/" ]]
then
	echo "==================================================================="
	diff -ur -x CVS "$EMULTILIB_CVS_TREE/${file%/*}/files/" \
		"${file%/*}/files/"
	case $? in
		0) echo "No differences in '${file%/*}/files/'" ;;
		1) : ;;
		*) die 2 "diff failed with exit code $?" ;;
	esac
fi
