#!/bin/bash

# IMPORTANT NOTE: You will need an actual CVS checkout of the portage tree,
# which you'll need to update before running this script.  You can set the
# following environmental variable to wherever yours is.

: ${EMULTILIB_CVS_TREE:="$(portageq portdir)"}
: ${EMULTILIB_CVS_TREE:="/usr/portage"}

usage() {
    printf >&2 '%s\n' "" \
    "Usage:" \
    "bin/show_changes [ --overlay | -o ] path/to/file.ebuild" \
    "bin/show_changes [ --overlay | -o ] eclass/file.eclass" \
    "  show changes in portage since ebuild in overlay was last updated" \
    "" \
    "--overlay | -o" \
    "  instead show difference between equivalent revisions of portage" \
    "  ebuild with overlay ebuild"
    exit "$1"
}


# Typical workflow using this script:
# -----------------------------------
#    # cd path/to/multilib/overlay
#    # bin/show_changes path/to/file.ebuild
#
# <read output, edit the ebuild in another terminal, save it, then>
#
#    # bin/show_changes path/to/file.ebuild -o
#
# <check you changed it correctly, didn't make any typos>
#
#    # ebuild path/to/file.ebuild digest    # or repoman manifest
#    # egencache --repo=multilib --update
# -----------------------------------

# Or possibly:
# -----------------------------------
#    # cd path/to/multilib/overlay
#    # bin/show_changes path/to/file.ebuild
#
# <it's too many changes, so you decide to copy the ebuild and make the>
# <treat it like a new ebuild to the tree>
#
#    # bin/show_changes path/to/file.ebuild -o
#
# <this shows the diff between the (outdated) overlay ebuild and the SAME>
# <(outdated) revision in the portage tree>
# <in another terminal:>
#
#    # cp {/usr/portage/,}path/to/file.ebuild
#    # $EDITOR path/to/file.ebuild
#
# <etc. as above>
# -----------------------------------

die() {
    local line
    for line in "${@:2}"
    do
        printf >&2 '%s\n' "$0: $line"
    done
    exit "$1"
}

[[ "$( cat ./profiles/repo_name 2>/dev/null )" = multilib ]] || \
    die 1 "Please cd to your multilib overlay directory first"

for arg
do
    case "$arg" in
        --overlay|-o)
            check_mode="true" ;;
        --help|-h)
            usage 0 ;;
        -*)
	    echo >&2 "Unknown option '$arg'"
            usage 1 ;;
        *)
            if [[ $file ]]
            then
                echo >&2 "Provide one filename only"
                usage 1
            else
                file="$arg"
            fi ;;
    esac
done

if ! [[ $file ]]
then
        echo >&2 "You must provide a filename"
	usage 1
fi

overlay_revision="$(awk -v file="$file" '

    /# \$Header: / {
        if ( $3 == "/var/cvsroot/gentoo-x86/" file ",v" ) {
            print $4
        }
        exit;
    }

    ' "$file")" || die 3 "couldn't get CVS revision of '$file'"

if ! [[ "$overlay_revision" ]]
then
    overlay_revision="1.1"
    echo "'$file' in overlay has broken CVS header, please fix it"
fi

pushd >/dev/null "$EMULTILIB_CVS_TREE" || \
    die 2 "pushd '$EMULTILIB_CVS_TREE' failed"

if [[ "$check_mode" = "true" ]]
then
    diff -u <(cvs update -f -p -r "$overlay_revision" "$file") "$OLDPWD/$file"
    case $? in
        0) die 3 "No differences between portage and overlay ebuild." \
            "Why is it even in the overlay?" ;;
        1) : ;;
        *) die 2 "diff failed with exit code $?" ;;
    esac
else
    cvs diff -s -d -u -r "$overlay_revision" "$file" \
        && echo "'$file' seems up-to-date compared with the portage tree"
fi

popd >/dev/null || die 2 "popd failed"

if [[ -d "$EMULTILIB_CVS_TREE/${file%/*}/files/" ]]
then
    echo "==================================================================="
    diff -ur -x CVS "$EMULTILIB_CVS_TREE/${file%/*}/files/" \
        "${file%/*}/files/"
    case $? in
        0) echo "No differences in '${file%/*}/files/'" ;;
        1) : ;;
        *) die 2 "diff failed with exit code $?" ;;
    esac
fi
