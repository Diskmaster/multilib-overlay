#!/bin/bash 

# TODO: - add outer loop to iterate through multiple source dirs
#	- ask to remove files / add to exclude list
#	- fix false positives

# WARNING: Do not use this in a tree containing ebuilds that are not all from the source_dir (ie. from an overlay). This script
# automatically deletes all ebuilds that are no longer existing in the source. 

debug()
{
	[[ -n ${DEBUG} ]] && echo "$*"
}

echo_red() {
	echo -e "\033[1;31m$*\033[0m"
}

echo_green() {
	echo -e "\033[1;32m$*\033[0m"
}

echo_yellow() {
	echo -e "\033[1;33m$*\033[0m"
}

check_ebuild() {

	echo ${IGNORE_ERRORS} | grep $1
	if [[ $? == 1 ]]; then
		if [[ "" != "$(sed -n "/src_unpack/,/^\}/ { s/epatch\|\<sed\|eautoconf/foo/g ; T end; p; :end d}" $1)" ]];then
			echo_red "$1 contains epatch sed or eautoconf in src_unpack"
			ASK+="7"
			EBUILDS_WITH_ERRORS+="$1 "
		fi
		if [[ "" != "$(sed -n "/src_configure/,/^\}/ { s/emake/foo/g ; T end; p; :end d}" $1)" ]];then
			echo_red "$1 contains emake in src_configure"
			ASK+="8"
			EBUILDS_WITH_ERRORS+="$1 "
		fi
		if [[ "" != "$(sed -n "/src_compile/,/^\}/ { s/econf/foo/g ; T end; p; :end d}" $1)" ]];then
			echo_red "$1 contains econf in src_compile"
			ASK+="9"
			EBUILDS_WITH_ERRORS+="$1 "
		fi
	else
		echo_red "Ignoring check ebuild errors for $1"
	fi

}

# bin/auto-sync-cfg should be in .gitignore.
if [[ -f bin/auto-sync-cfg ]]; then
	echo_green "Passed auto-sync-cfg sanity check."
	source bin/auto-sync-cfg
else
	echo_red "Failed auto-sync-cfg sanity check, copying from .skel. You may wanna review it!"
	cp -v bin/auto-sync-cfg.skel bin/auto-sync-cfg
	exit 1	
fi

PACKAGE_LIST="$(cat ${PACKAGE_LIST_FILE} | sed "s/#.*//")"
[[ -n ${DEBUG} ]] && echo ${PACKAGE_LIST}

EXCLUDES=""
for EXCLUDE in $(cat ${PACKAGE_EXCLUDE_IN_OVERLAY_FILE} | sed "s/#.*//"); do
	if [[ -f ${EXCLUDE} ]]; then
		[[ "${DEBUG}" > "1" ]] && echo "exclude_in_overlay: excluding ${EXCLUDE}"
		EXCLUDES+="-not -wholename ${EXCLUDE} "
	else
		echo_red "exclude_in_overlay: ${EXCLUDE} is not in the overlay"
	fi
done

for EXCLUDE in $(cat ${PACKAGE_EXCLUDE_IN_SOURCE_DIR_FILE} | sed "s/#.*//"); do
	if [[ -f ${SOURCE_DIR}/${EXCLUDE} ]]; then
		[[ "${DEBUG}" > "1" ]] && echo "exclude_in_source_dir: excluding ${EXCLUDE}"
		EXCLUDES+="-not -wholename ${EXCLUDE} "
		if [[ -f ${EXCLUDE} ]]; then
			echo_red "exclude_in_source_dir: ${EXCLUDE} is in the overlay and in source_dir"
		fi
	else
		echo_red "exclude_in_source_dir: ${EXCLUDE} is not in the source_dir"
	fi
done

IGNORE_ERRORS=""
for IGNORE in $(cat ${PACKAGE_IGNORE_ERRORS_LIST_FILE} | sed "s/#.*//"); do
	if [[ -f ${SOURCE_DIR}/${IGNORE} ]]; then
		[[ "${DEBUG}" > "1" ]] && echo "ignore_errors_list: ignoring ${IGNORE}"
		IGNORE_ERRORS+="${IGNORE} "
	else
		echo_red "ignore_errors_list: ${IGNORE} is not in the source dir"
	fi
done

for PACKAGE in ${PACKAGE_LIST}; do
	while [[ "${PACKAGE}" != "" ]]; do
		echo_yellow "\nworking on: ${PACKAGE}"
		EBUILDS=""
		ASK=""
		for I in . ${SOURCE_DIR}; do
			pushd ${I} >/dev/null
			if [[ -d ${PACKAGE} ]]; then
				EBUILDS+="$(find ${PACKAGE} -name "*.ebuild" ${EXCLUDES}) "
			else
				echo "${PACKAGE} is not in ${I}"
				ASK+="1"
			fi
			popd >/dev/null
		done
		EBUILDS="$(echo ${EBUILDS} | sed "s/[[:space:]]\+/\n/g" | sort -u)"
		[[ -n ${DEBUG} ]] && echo -e  "EBUILDS: ${EBUILDS}"
		let NUM_EBUILDS=0
		let NUM_PATCHED_EBUILDS=0
		MISSING_EBUILD_PATCHES=""
		APPLIED_EBUILD_PATCHES=""
		EBUILDS_WITH_ERRORS=""
		for EBUILD in ${EBUILDS}; do
			NUM_EBUILDS+=1
			echo_yellow "working on: ${EBUILD}"
			if [[ -f ${SOURCE_DIR}/${EBUILD} ]]; then
				mkdir -p ${PACKAGE}
				cp ${SOURCE_DIR}/${EBUILD} ${EBUILD}
				if [[ -f ${PATCH_DIR}/${EBUILD}.patch ]]; then
					NUM_PATCHED_EBUILDS+=1
					patch -p1 < ${PATCH_DIR}/${EBUILD}.patch
					APPLIED_EBUILD_PATCHES+="${PATCH_DIR}/${EBUILD}.patch "
				else
					MISSING_EBUILD_PATCHES+="${PATCH_DIR}/${EBUILD}.patch "
				fi

				check_ebuild ${EBUILD}

				bin/make_multilib --no-manifest ${EBUILD} 
			else
				echo_red "${EBUILD} is not in ${SOURCE_DIR}"
				eg rm ${EBUILD}
				ASK+="2"
			fi
			echo_green "finished working on: ${EBUILD}"
		done
		if [[ "$NUM_EBUILDS" != "$NUM_PATCHED_EBUILDS" ]];then
			if [[ "$NUM_PATCHED_EBUILDS" > 0 ]]; then
				echo_red "the following patches are missing: ${MISSING_EBUILD_PATCHES}"
				echo_red "if those ebuilds do not need a patch add a empty file"
				ASK+="3"
			fi
		fi
		if [[ -d ${PATCH_DIR}/${PACKAGE} ]]; then
			if [[ -n $APPLIED_EBUILD_PATCHES ]]; then
				if [[ "" == "$(cat $APPLIED_EBUILD_PATCHES)" ]]; then
					echo_red "all applied ebuild patches are empty $APPLIED_EBUILD_PATCHES"
					ASK+="4"
				fi
			fi
			AVAILABLE_EBUILD_PATCHES="$(find ${PATCH_DIR}/${PACKAGE} -name "*.patch" -or -path "${PATCH_DIR}/${PACKAGE}/files" -prune -not -path "${PATCH_DIR}/${PACKAGE}/files")"
			UNUSED_EBUILD_PATCHES="$(echo ${AVAILABLE_EBUILD_PATCHES} | sed "s/[[:space:]]\+/\n/g" | sort -u)"
			for PATCH in $APPLIED_EBUILD_PATCHES; do
				UNUSED_EBUILD_PATCHES="${UNUSED_EBUILD_PATCHES/${PATCH}/}"
			done
			for PATCH in ${UNUSED_EBUILD_PATCHES}; do
				if [[ "" == "$(grep ${PATCH/.patch/} ${PACKAGE_EXCLUDE_IN_OVERLAY_FILE})" ]]; then
					echo_red "$PATCH seems to be unneeded"
					eg rm ${PATCH}
					ASK+="5"
				fi
			done
		fi
		bin/check_prep_ml_binaries.sh --no-manifest ${PACKAGE}

		FILES=""
		for I in . ${SOURCE_DIR}; do
			pushd ${I} >/dev/null
			if [[ -d ${PACKAGE}/files ]]; then
				FILES+="$(find ${PACKAGE}/files -type f ${EXCLUDES} ) "
			else
				[[ -n ${DEBUG} ]] && echo -e "no patches in ${I}"
			fi
			popd >/dev/null
		done
		FILES="$(echo ${FILES} | sed "s/[[:space:]]\+/\n/g" | sort -u)"
		[[ -n ${DEBUG} ]] && echo -e "FILES: ${FILES}"
		for FILE in ${FILES}; do
			if [[ -f ${SOURCE_DIR}/${FILE} ]]; then
				mkdir -p ${PACKAGE}/files
				cp ${SOURCE_DIR}/${FILE} ${FILE}
			else
				echo_red "${FILE} is not in ${SOURCE_DIR}"
				eg rm ${FILE}
				ASK+="6"
			fi
		done
		if [[ -d ${PATCH_DIR}/${PACKAGE}/files ]]; then
			cat ${PATCH_DIR}/${PACKAGE}/files/* | patch -p1
		fi
		echo_green "finished working on: ${PACKAGE}\n"
		UNNEEDED_FILES="$(find ${PACKAGE} -name "*.orig" -o -name "*.rej" -o -name "ChangeLog" -o -name "metadata.xml" )"
		if [[ "" != "${ASK}" || "" != "${UNNEEDED_FILES}" || "" != "$(git status | grep ${PACKAGE})" ]]; then
			debug "ASK: ${ASK} UNNEEDED_FILES ${UNNEEDED_FILES} git $(git status | grep ${PACKAGE})"
			cat ${SOURCE_DIR}/${PACKAGE}/Manifest >> ${PACKAGE}/Manifest
			for UNNEEDED in ${UNNEEDED_FILES}; do
				rm -f ${UNNEEDED} 2> /dev/null
				git rm ${UNNEEDED} 2> /dev/null
			done
			ebuild ${EBUILD} manifest
			egencache --update --repo=multilib ${PACKAGE}

			if [[ "" != "${ASK}" || "" != "${UNNEEDED_FILES}" ]]; then
				if [[ "" == "${BATCH_MODE}" ]]; then
					while true; do
						echo "d:show diff (pkg) q:show diff (overlay) e:show eix c:commit s:skip a:sync
again r:remove all patches m:create Missing patches X:exit f:Edit ebuild" 
						read INPUT
						case $INPUT in
							d)
								git diff ${PACKAGE} | colordiff | less
								;;
							q)
								git diff . | colordiff | less
								;;
							e)
								eix ${PACKAGE}
								;;
							c)
								git add ${PACKAGE}
								if [[ -d ${PATCH_DIR}/${PACKAGE} ]]; then
									git add ${PATCH_DIR}/${PACKAGE}
								fi
								git add metadata/cache/ --all
								git commit -m "synced ${PACKAGE} via auto-sync"
								PACKAGE=""
								break
								;;
							s)
								git checkout ${PACKAGE}
								egencache --update --repo=multilib ${PACKAGE}
								PACKAGE=""
								break
								;;
							f) 	
								echo ${EBUILDS_WITH_ERRORS} | tr ' ' '\n' | xargs -n1 -i sh bin/patch_helper {}
								break
								;;
						    r)  
								if [[ -d ${PATCH_DIR}/${PACKAGE} ]]; then
									git rm -r ${PATCH_DIR}/${PACKAGE}
									rm -rf ${PATCH_DIR}/${PACKAGE}
								fi
								break
								;;
							a)
								break
								;;

							m)  
								echo ${MISSING_EBUILD_PATCHES} | tr ' ' '\n' | xargs -n1 -i touch {}

								#MISSING_EBUILD_PATCHES="$(echo ${MISSING_EBUILD_PATCHES} | tr ' ' '\n' | sort -u)"
								#echo ${MISSING_EBUILD_PATCHES} | xargs -n1 -i touch {} 
								#echo ${MISSING_EBUILD_PATCHES} | xargs -n1 -i echo {} 
								break
								;;
							X) 
								exit
								;;
						esac
					done
				else
					echo_red "Automatically skipping package that needs attention" ${PACKAGE}
					PACKAGE=""
				fi 
			else
				echo_green "Automatically commiting package" ${PACKAGE}
				git add ${PACKAGE}
				if [[ -d ${PATCH_DIR}/${PACKAGE} ]]; then
					git add ${PATCH_DIR}/${PACKAGE}
				fi
				git add metadata/cache/ --all
				git commit -m "synced ${PACKAGE} via auto-sync"
				PACKAGE=""
			fi
		else
			PACKAGE=""
		fi
	done
done

